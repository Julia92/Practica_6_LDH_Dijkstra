<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="_steps_matrix_8java" kind="file">
    <compoundname>StepsMatrix.java</compoundname>
    <innerclass refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix" prot="public">main::java::com::company::dijkstratest::StepsMatrix</innerclass>
    <innernamespace refid="namespacemain_1_1java_1_1com_1_1company_1_1dijkstratest">main::java::com::company::dijkstratest</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="keyword">package<sp/></highlight><highlight class="normal">main.java.com.company.dijkstratest;</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>java.math.BigDecimal;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>java.util.PriorityQueue;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>java.util.ArrayList;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>java.util.Collections;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix" refkind="compound"><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix" kindref="compound">StepsMatrix</ref></highlight></codeline>
<codeline lineno="14"><highlight class="normal">{</highlight></codeline>
<codeline lineno="15" refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1a1a3eb1ca85e39b9b704bfe7e26256afb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>ArrayList&lt;Vertex&gt;<sp/><ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1a1a3eb1ca85e39b9b704bfe7e26256afb" kindref="member">vertices</ref>;</highlight></codeline>
<codeline lineno="16" refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1aa51c97e07faba7d835f614554810ab44" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>ArrayList&lt;Vertex&gt;<sp/><ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1aa51c97e07faba7d835f614554810ab44" kindref="member">toBeProcessed</ref>;</highlight></codeline>
<codeline lineno="17" refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1af820b561be0222cbf21fd2a6134047b2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>ArrayList&lt;Vertex&gt;<sp/><ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1af820b561be0222cbf21fd2a6134047b2" kindref="member">eliminatedList</ref>;</highlight></codeline>
<codeline lineno="18" refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1acb65a2ac68a2b40a4aca6fe2d9276f0d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>ArrayList&lt;Vertex&gt;<sp/><ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1acb65a2ac68a2b40a4aca6fe2d9276f0d" kindref="member">beingReturned</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ArrayList&lt;Vertex&gt;();</highlight></codeline>
<codeline lineno="19" refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1a9f574c424ce414987499434ed7311858" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1a9f574c424ce414987499434ed7311858" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1a656c4786dc8adb10dc37018d8c2c1e66" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1a656c4786dc8adb10dc37018d8c2c1e66" kindref="member">StepsMatrix</ref>(ArrayList&lt;Vertex&gt;<sp/><ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1a1a3eb1ca85e39b9b704bfe7e26256afb" kindref="member">vertices</ref>,<sp/>ArrayList&lt;Vertex&gt;<sp/><ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1aa51c97e07faba7d835f614554810ab44" kindref="member">toBeProcessed</ref>,<sp/>ArrayList&lt;Vertex&gt;<sp/><ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1af820b561be0222cbf21fd2a6134047b2" kindref="member">eliminatedList</ref>)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.vertices<sp/>=<sp/><ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1a1a3eb1ca85e39b9b704bfe7e26256afb" kindref="member">vertices</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.toBeProcessed<sp/>=<sp/><ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1aa51c97e07faba7d835f614554810ab44" kindref="member">toBeProcessed</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this.toBeProcessed.isEmpty())</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.toBeProcessed<sp/>=<sp/><ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1a1a3eb1ca85e39b9b704bfe7e26256afb" kindref="member">vertices</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1a9f574c424ce414987499434ed7311858" kindref="member">size</ref><sp/>=<sp/>vertices.size();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.eliminatedList<sp/>=<sp/><ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1af820b561be0222cbf21fd2a6134047b2" kindref="member">eliminatedList</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1a25baaea9cd4f24583b9f81b317b88245" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1a25baaea9cd4f24583b9f81b317b88245" kindref="member">buildStepsMatrix</ref>()</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>System.out.println(</highlight><highlight class="stringliteral">&quot;\r\n\r\nSTEPS<sp/>MATRIX:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_vertex" kindref="compound">Vertex</ref><sp/>source<sp/>:<sp/><ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1aa51c97e07faba7d835f614554810ab44" kindref="member">toBeProcessed</ref>)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>diameter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1a0d41b80e6dd2a43ac0da575866d00a32" kindref="member">calculateShortestPath</ref>(source);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>System.out.print(source<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_vertex" kindref="compound">Vertex</ref><sp/>v<sp/>:<sp/>toBeProcessed)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(toBeProcessed.size()<sp/>==<sp/><ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1a9f574c424ce414987499434ed7311858" kindref="member">size</ref>)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>source.setSteps(v,<sp/>v.getMinDistance());</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>System.out.print(v.getMinDistance()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diameter<sp/>+=<sp/>v.getMinDistance();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>source.setDiameter(diameter);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>System.out.print(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>diameter<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1aa0ceb165ab3fe248dace9dce3c9fd1c6" kindref="member">getCentrality</ref>(diameter));</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1a15b14136df6c93f78deff3e498093c5a" kindref="member">reset</ref>(toBeProcessed);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1a78a89eed56a05139649e2a34fd6b4fa7" kindref="member">recovery</ref>(source,<sp/>diameter);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_vertex" kindref="compound">Vertex</ref><sp/>v<sp/>:<sp/><ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1acb65a2ac68a2b40a4aca6fe2d9276f0d" kindref="member">beingReturned</ref>)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eliminatedList.remove(v);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertices.add(v);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>System.out.println(&quot;Vertex<sp/>&quot;<sp/>+<sp/>v.getName()<sp/>+<sp/>&quot;<sp/>is<sp/>added<sp/>back&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Collections.sort(<ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1a1a3eb1ca85e39b9b704bfe7e26256afb" kindref="member">vertices</ref>);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1a0d41b80e6dd2a43ac0da575866d00a32" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1a0d41b80e6dd2a43ac0da575866d00a32" kindref="member">calculateShortestPath</ref>(<ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_vertex" kindref="compound">Vertex</ref><sp/>source)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>source.setMinDistance(0);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PriorityQueue&lt;Vertex&gt;<sp/>vertexQueue<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>PriorityQueue&lt;Vertex&gt;();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertexQueue.add(source);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!vertexQueue.isEmpty())</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_vertex" kindref="compound">Vertex</ref><sp/>u<sp/>=<sp/>vertexQueue.poll();</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_vertex" kindref="compound">Vertex</ref><sp/>v<sp/>:<sp/>u.<ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_vertex_1ad4896ef0f829054d9a765436cdda7804" kindref="member">getAdjacencies</ref>())</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>distanceThroughU<sp/>=<sp/>u.getMinDistance()<sp/>+<sp/>v.<ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_vertex_1a37e1d362f47485e54f2e0a9cf56ac8c3" kindref="member">getWeight</ref>();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(distanceThroughU<sp/>&lt;<sp/>v.getMinDistance())</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertexQueue.remove(v);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.setMinDistance(distanceThroughU);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.setPrevious(u);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertexQueue.add(v);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1aa0ceb165ab3fe248dace9dce3c9fd1c6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1aa0ceb165ab3fe248dace9dce3c9fd1c6" kindref="member">getCentrality</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>diameter)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BigDecimal<sp/>b<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>BigDecimal((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>(1.0/diameter));</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b.setScale(3,<sp/>BigDecimal.ROUND_HALF_UP).floatValue();</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1a15b14136df6c93f78deff3e498093c5a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1a15b14136df6c93f78deff3e498093c5a" kindref="member">reset</ref>(ArrayList&lt;Vertex&gt;<sp/><ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1a1a3eb1ca85e39b9b704bfe7e26256afb" kindref="member">vertices</ref>)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_vertex" kindref="compound">Vertex</ref><sp/>v<sp/>:<sp/>vertices)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.setMinDistance(Integer.MAX_VALUE);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1a78a89eed56a05139649e2a34fd6b4fa7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1a78a89eed56a05139649e2a34fd6b4fa7" kindref="member">recovery</ref>(<ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_vertex" kindref="compound">Vertex</ref><sp/>source,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>diameter)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classmain_1_1java_1_1com_1_1company_1_1dijkstratest_1_1_steps_matrix_1aa51c97e07faba7d835f614554810ab44" kindref="member">toBeProcessed</ref>.size()<sp/>&lt;=<sp/>6<sp/>&amp;&amp;<sp/>diameter<sp/>&gt;<sp/>10)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>System.out.print(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Vertex<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>source.getName()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;s<sp/>diameter<sp/>&gt;<sp/>10,delete\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>beingReturned.add(source);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>System.out.println();</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/JulyaMaria/git/Practica_6_LDH_Dijkstra/DijkstraLDHP6/src/main/java/com/company/dijkstratest/StepsMatrix.java"/>
  </compounddef>
</doxygen>
